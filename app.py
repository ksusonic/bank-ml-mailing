import time
import streamlit as st
import pandas as pd

from PIL import Image

from model import open_data, preprocess_data, get_importances, predict_on_input


def preload_content():
    _, _, _, _, scaler = preprocess_data(open_data('dataset.csv'))

    background = Image.open('static/bank.jpg')
    age = Image.open('static/age.png')
    heatmap = Image.open('static/heatmap.png')
    income = Image.open('static/income.png')
    income_with_target = Image.open('static/income_with_target.png')

    return scaler, background, age, heatmap, income, income_with_target


def highlight_weighs(s):
    return ['background-color: #E6F6E4'] * len(s) if s['–í–µ—Å'] > 0 else ['background-color: #F6EBE4'] * len(s)


def pack_input(sex, age, child, dependants, work, pens, income, loans, closed_loans):
    return pd.DataFrame({
        'AGE': age,
        'GENDER': 1 if sex == '–ú—É–∂—Å–∫–æ–π' else 0,
        'CHILD_TOTAL': child,
        'DEPENDANTS': dependants,
        'SOCSTATUS_WORK_FL': 1 if work == '–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω' else 0,
        'SOCSTATUS_PENS_FL': 1 if pens == '–ù–∞ –ø–µ–Ω—Å–∏–∏' else 0,
        'PERSONAL_INCOME': income,
        'LOAN_NUM_TOTAL': loans,
        'LOAN_NUM_CLOSED': closed_loans,
    }, index=[0])


def render_page(scaler, background, age, heatmap, income, income_with_target):
    st.title('–†–∞—Å—Å—ã–ª–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
    st.subheader('–ò—Å—Å–ª–µ–¥—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞')
    st.write(
        '–ú–∞—Ç–µ—Ä–∏–∞–ª - –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞ –∏ target, –æ–∑–Ω–∞—á–∞—é—â–∏–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–Ω—è—Ç–∏–µ "–∫–ª–∏–∫")'
    )
    st.image(background)

    tab1, tab2, tab3 = st.tabs([':mag: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å', ':mage: –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', ':vertical_traffic_light: –û—Ü–µ–Ω–∏—Ç—å'])

    with tab1:
        st.write('Exploratory data analysis: –∏—Å—Å–ª–µ–¥—É–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ :sparkles:')

        st.write('**–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤**')
        st.image(age)
        st.write('–°–∞–º—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç - –æ—Ç 20 –¥–æ 60 –ª–µ—Ç')
        st.divider()

        st.write('**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤**')
        st.image(heatmap)
        st.write('–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –ø–æ–ª—É')
        st.write(
            '–ù–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: –ø–µ–Ω—Å–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (–ª–æ–≥–∏—á–Ω–æ, —Ç–∫ –ø–µ–Ω—Å–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞)'
            ', –∏–∂–¥–∏–≤–µ–Ω—Ü—ã –∏ –¥–µ—Ç–∏. –ù–∞ target –Ω–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏ –¥–æ—Ö–æ–¥.')
        st.divider()

        st.write('**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –ø–æ –¥–æ—Ö–æ–¥—É:**')
        st.image(income)
        st.write('–í—ã–±–æ—Ä–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—ã–±—Ä–æ—Å—ã –≤ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥.')
        st.divider()

        st.write('**–í–ª–∏—è–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –Ω–∞ –∫–ª–∏–∫ –ø–æ –ø–æ–∫–∞–∑—É:**')
        st.image(income_with_target)
        st.write('–£ –ª—é–¥–µ–π —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º –∫–ª–∏–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–∞—â–µ')
        st.divider()

    with tab2:
        st.write('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:')

        col1, col2, col3 = st.columns(3)
        with col1:
            sex = st.selectbox('–ü–æ–ª', ['–ñ–µ–Ω—Å–∫–∏–π', '–ú—É–∂—Å–∫–æ–π'])
            age = st.slider('–í–æ–∑—Ä–∞—Å—Ç', min_value=0, max_value=100)
        with col2:
            child = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π', min_value=0, max_value=100)
            dependants = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤', min_value=0, max_value=100)
        with col3:
            work = st.selectbox('–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã', ['–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω', '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π'])
            pens = st.selectbox('–ü–µ–Ω—Å–∏—è', ['–ù–µ—Ç', '–ù–∞ –ø–µ–Ω—Å–∏–∏'])
        col1, col2 = st.columns(2)
        with col1:
            income = st.slider('–°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –ª–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥', min_value=0, max_value=1000000)
            loans = st.slider('–í–∑—è—Ç–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', min_value=0, max_value=10)
            closed_loans = st.slider('–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', min_value=0, max_value=loans) if loans > 0 else 0
        st.divider()

        col1, col2, col3 = st.columns(3)
        if col2.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å :mage:'):
            with st.spinner('–°—á–∏—Ç–∞–µ–º!'):
                time.sleep(1)
                inputs = pack_input(sex, age, child, dependants, work, pens, income, loans, closed_loans)
                scaled = pd.DataFrame(scaler.transform(inputs), columns=inputs.columns)

                pred, proba = predict_on_input(scaled)
                if pred == 1:
                    st.success('–í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! :thumbsup: :thumbsup:')
                    with st.expander('–ü–æ–¥—Ä–æ–±–Ω–µ–µ'):
                        st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ: **`{round(max(proba[0]), 3)}`**')
                elif pred == 0:
                    st.error('–ë–æ—é—Å—å, –≤—ã –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º :thumbsdown: :thumbsdown:')
                    with st.expander('–ü–æ–¥—Ä–æ–±–Ω–µ–µ'):
                        st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ: **`{round(max(proba[0]), 3)}`**')
                else:
                    st.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')

    with tab3:
        col1, col2 = st.columns(2)
        with col1:
            st.write('**–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–ª–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞?**')
            st.dataframe(get_importances(5, 'most').style.apply(highlight_weighs, axis=1))
        with col2:
            st.write('**–ê —á—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –≤–∞–∂–Ω–æ?**')
            st.dataframe(get_importances(5, 'least').style.apply(highlight_weighs, axis=1))


def load_page():
    st.set_page_config(layout="wide",
                       page_title="–£–¥–æ–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–æ–π",
                       page_icon='ü¶í')
    scaler, background, age, heatmap, income, income_with_target = preload_content()
    render_page(scaler, background, age, heatmap, income, income_with_target)


if __name__ == "__main__":
    load_page()
